#!/bin/bash
# Written by rabbitdew but adapted almost entirely from a digitalocean tutorial.
# Should smack into a Dockerfile, just sick of doing these things step-by-step. 
# just for now to make sure
echo 'nameserver 8.8.8.8' > /etc/resolv.conf

# install java
add-apt-repository -y ppa:webupd8team/java
# accept eula
echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
apt-get update
apt-get -y install oracle-java8-installer



if [ $? -ne 0 ]
then
        echo "java install failed"
        exit 1
fi

# install elasticsearch
echo "deb http://packages.elastic.co/elasticsearch/2.x/debian stable main" > /etc/apt/sources.list.d/elasticsearch-2.x.list
wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
apt-get update
apt-get -y install elasticsearch
sed -i "s@\# network.host: 192.168.0.1@network.host: localhost@" /etc/elasticsearch/elasticsearch.yml
service elasticsearch restart
update-rc.d elasticsearch defaults 95 10
if [ $? -ne 0 ]
then
        echo "elasticsearch install failed"
        exit 1
fi

# install kibana
echo "deb http://packages.elastic.co/kibana/4.4/debian stable main" > /etc/apt/sources.list.d/kibana-4.4.x.list
apt-get update
apt-get -y install kibana
sed -i "s@\# server.host: \"0.0.0.0\"@server.host: \"localhost\"@" /opt/kibana/config/kibana.yml
update-rc.d kibana defaults 96 9
service kibana start
if [ $? -ne 0 ]
then
        echo "kibana install failed"
        exit 1
fi

# install nginx
apt-get -y install nginx apache2-utils
# Create a user manually and set servername 
#sudo htpasswd -c /etc/nginx/htpasswd.users kibanaadmin
#mkdir -p /etc/htpasswd

#echo 'admin:admin' > /etc/nginx/htpasswd.users
# chmod 0644 /etc/nginx/htpasswd.users

echo "server {
        listen 80;

        server_name $HOSTNAME;

        location / {
            proxy_pass http://localhost:5601;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host \$host;
            proxy_cache_bypass \$http_upgrade;        
        }
    }" >  /etc/nginx/sites-available/default
service nginx restart
if [ $? -ne 0 ]
then
        echo "nginx default site config failed"
        exit 1
fi

# install logstash
echo "installing logstash"
echo 'deb http://packages.elastic.co/logstash/2.2/debian stable main' >> /etc/apt/sources.list.d/logstash-2.2.x.list
apt-get update
apt-get -y install logstash
if [ $? -ne 0 ]
then
        echo "logstash installation failed"
        exit 1
fi

mkdir -p /etc/pki/tls/certs
mkdir /etc/pki/tls/private

# if fqdn
openssl req -subj "/CN=$HOSTNAME/" -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout /etc/pki/tls/private/logstash-forwarder.key -out /etc/pki/tls/certs/logstash-forwarder.crt

# if not
# 
# remember to first Find the [ v3_ca ] section in the file, and add this line under it (substituting in # ## ELK Server's private IP address): subjectAltName = IP: ELK_server_private_IP


#sed -i 's@[ v3_ca ]/
#'s/regexp/&\n/g'


#openssl req -config /etc/ssl/openssl.cnf -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout /etc/pki/tls/private/logstash-forwarder.key -out /etc/pki/tls/certs/logstash-forwarder.crt



echo '    input {
      beats {
        port => 5044
        ssl => true
        ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
        ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
      }
    }' > /etc/logstash/conf.d/02-beats-input.conf


echo '     filter {
      if [type] == "syslog" {
        grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
          add_field => [ "received_at", "%{@timestamp}" ]
          add_field => [ "received_from", "%{host}" ]
        }
        syslog_pri { }
        date {
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
      }
    }' > /etc/logstash/conf.d/10-syslog-filter.conf



echo '     output {
      elasticsearch {
        hosts => ["localhost:9200"]
        sniffing => true
        manage_template => false
        index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
        document_type => "%{[@metadata][type]}"
      }
    }' > /etc/logstash/conf.d/30-elasticsearch-output.conf



service logstash configtest
if [ $? -ne 0 ]
then
        echo "logstash config failed"
        exit 1
fi


service logstash restart
update-rc.d logstash defaults 96 9


#get some kibana dashboards
cd
curl -L -O https://download.elastic.co/beats/dashboards/beats-dashboards-1.1.0.zip
apt-get -y install unzip
unzip beats-dashboards-*.zip
cd beats-dashboards-*
./load.sh
if [ $? -ne 0 ]
then
        echo "beats-dashboard failed"
        exit 1
fi

cd ~
curl -O https://gist.githubusercontent.com/thisismitch/3429023e8438cc25b86c/raw/d8c479e2a1adcea8b1fe86570e42abab0f10f364/filebeat-index-template.json
if [ $? -ne 0 ]
then
        echo 'filebeat template download failed'
        exit 1
fi

curl -XPUT 'http://localhost:9200/_template/filebeat?pretty' -d@filebeat-index-template.json
if [ $? -ne 0 ]
then
        echo "load filebeat template failed"
        exit 1
fi


